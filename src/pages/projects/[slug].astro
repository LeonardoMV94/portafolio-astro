---
import projects from "../../collections/projects.json";
import PageHeading from "../../components/page-heading.astro";
import Layout from "../../layouts/main.astro";
import GitHubStats from "../../components/GithubStats.vue";
import MarkdownContent from "../../components/markdown-content.astro";
import { generateSlug } from "../../utils/slug";
import {
  fetchReadme,
  extractUsername,
  extractRepoName,
  getRepoInfo,
} from "../../utils/github";
import markdownit from "markdown-it";
import { getIcon } from "../../utils/getIconFromCdn";
import DemoCard from "../../components/demoCard.astro";

export async function getStaticPaths() {
  const paths = [];
  const usedSlugs = new Set();

  for (const project of projects) {
    let slug = generateSlug(project.name);

    // Handle duplicate slugs by adding a number
    let counter = 1;
    const originalSlug = slug;
    while (usedSlugs.has(slug)) {
      slug = `${originalSlug}-${counter}`;
      counter++;
    }

    usedSlugs.add(slug);

    // Fetch README content for each project
    let readmeContent: string | null = null;
    let readmeHtml: string | null = null;

    const username = extractUsername(project.url);
    const repoName = extractRepoName(project.url);

    const md = markdownit({
      html: true,
      linkify: true,
      typographer: true,
      breaks: true,
    });

    if (username && repoName) {
      readmeContent = await fetchReadme(username, repoName);
      if (readmeContent) {
        readmeHtml = await md.render(readmeContent);
      }
    }

    paths.push({
      params: { slug },
      props: { project, slug, readmeContent, readmeHtml },
    });
  }

  return paths;
}

const { project, slug, readmeContent, readmeHtml } = Astro.props;
const username = extractUsername(project.url);
const repoName = extractRepoName(project.url);
// const repoInfo = await getRepoInfo(username, repoName);
// console.log(repoInfo);
---

<Layout title={`${project.name} - Project Details`}>
  <section class="relative z-20 max-w-4xl mx-auto my-12 px-7 lg:px-0">
    <!-- Back button -->
    <div class="mb-8">
      <a
        href={`/projects#indice-${generateSlug(project.name)}`}
        class="inline-flex items-center text-sm text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100 transition-colors duration-200"
      >
        <svg
          class="w-4 h-4 mr-2 rotate-180"
          viewBox="0 0 13 15"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g
            stroke="none"
            stroke-width="1"
            fill="none"
            fill-rule="evenodd"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <g
              transform="translate(0.666667, 2.333333)"
              stroke="currentColor"
              stroke-width="2.4"
            >
              <polyline points="5.33333333 0 10.8333333 5.5 5.33333333 11"
              ></polyline>
              <line x1="10.8333333" y1="5.5" x2="0.833333333" y2="5.16666667"
              ></line>
            </g>
          </g>
        </svg>
        Back to Projects
      </a>
    </div>

    <!-- Project header -->
    <div class="mb-12">
      <PageHeading title={project.name} description={project.description} />
    </div>

    <!-- Project details -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Main content -->
      <div class="lg:col-span-2">
        <div class="prose prose-neutral dark:prose-invert max-w-none">
          <!-- Project image -->
          <div class="grid grid-cols-2 gap-8">
            <div class="">
              <div
                class="relative overflow-hidden rounded-2xl border border-neutral-200 dark:border-neutral-800"
              >
                <img
                  transition:name={`project-${generateSlug(project.name)}`}
                  src={getIcon(
                    project.frameworks[0] ??
                      project.languages[0] ??
                      project.technologies[0]
                  )}
                  alt={project.name}
                  class="object-contain w-full h-full"
                />
              </div>
            </div>

            <div>
              <h3
                class="text-xl font-semibold text-neutral-900 dark:text-neutral-100 mb-4"
              >
                About this project
              </h3>
              <p class="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                {project.description}
              </p>

              <!-- Project URL -->
              <div class="mt-8">
               {readmeContent ? (<a
                href={project.url}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-6 py-3 bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 rounded-lg hover:bg-neutral-800 dark:hover:bg-neutral-200 transition-colors duration-200 font-medium"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  viewBox="0 0 13 15"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g
                    stroke="none"
                    stroke-width="1"
                    fill="none"
                    fill-rule="evenodd"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <g
                      transform="translate(0.666667, 2.333333)"
                      stroke="currentColor"
                      stroke-width="2.4"
                    >
                      <polyline
                        points="5.33333333 0 10.8333333 5.5 5.33333333 11"
                      ></polyline>
                      <line
                        x1="10.8333333"
                        y1="5.5"
                        x2="0.833333333"
                        y2="5.16666667"></line>
                    </g>
                  </g>
                </svg>
                View Project
              </a>) : (<p class="text-sm">Private code project.<br> Request access to view the code</p>)} 
              </div>
            </div>
          </div>

          {/* README Section */}
          <div class="pt-8 border-t border-neutral-200 dark:border-neutral-800">
            <h3
              class="text-xl font-semibold text-neutral-900 dark:text-neutral-100 mb-6"
            >
              Project Documentation
            </h3>

            {
              readmeContent ? (
                <MarkdownContent markdown={readmeHtml} />
              ) : (
                <div class="text-center py-8">
                  <div class="text-neutral-400 dark:text-neutral-500 mb-4">
                    <svg
                      class="w-12 h-12 mx-auto mb-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      />
                    </svg>
                    <p class="text-sm">Private code project, request access to view the code</p>
                  </div>
                  {/* <a
                    href={project.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center text-sm text-blue-600 dark:text-blue-400 hover:underline"
                  >
                    View project on GitHub â†’
                  </a> */}
                </div>
              )
            }
          </div>
        </div>
      </div>

      <!-- sidebar with demo url -->

      <!-- Sidebar with tech stack -->
      <div class="lg:col-span-1">
        <div class="sticky top-24 space-y-6">
          {/* GitHub Stats */}
          {
            username && repoName && (
              <GitHubStats client:only="vue" username={username} repoName={repoName} />
            )
          }

          {
            project.demo && (
             <DemoCard project={project} />
            )
          }

          {/* Tech Stack */}
          <div
            class="bg-neutral-50 dark:bg-neutral-900 rounded-2xl p-6 border border-neutral-200 dark:border-neutral-800"
          >
            <h4
              class="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6"
            >
              Tech Stack
            </h4>

            <div class="space-y-6">
              {
                project.languages && project.languages.length > 0 && (
                  <div>
                    <h5 class="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      Languages
                    </h5>
                    <div class="flex flex-wrap gap-2">
                      {project.languages.map((language) => (
                        <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 text-xs font-medium rounded-full">
                          <div class="flex items-center gap-2">
                            <div>{language} </div>
                            <img
                              src={getIcon(language)}
                              alt={language}
                              class="w-4 h-4"
                            />
                          </div>
                        </span>
                      ))}
                    </div>
                  </div>
                )
              }

              {
                project.frameworks && project.frameworks.length > 0 && (
                  <div>
                    <h5 class="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      Frameworks
                    </h5>
                    <div class="flex flex-wrap gap-2">
                      {project.frameworks.map((framework) => (
                        <span class="px-3 py-1 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 text-xs font-medium rounded-full">
                          <div class="flex items-center gap-2">
                            <div>{framework} </div>
                            <img
                              src={getIcon(framework)}
                              alt={framework}
                              class="w-4 h-4"
                            />
                          </div>
                        </span>
                      ))}
                    </div>
                  </div>
                )
              }

              {
                project.technologies && project.technologies.length > 0 && (
                  <div>
                    <h5 class="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      Technologies
                    </h5>
                    <div class="flex flex-wrap gap-2">
                      {project.technologies.map((tech) => (
                        <span class="px-3 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200 text-xs font-medium rounded-full">
                          <div class="flex items-center gap-2">
                            <div>{tech} </div>
                            <img
                              src={getIcon(tech)}
                              alt={tech}
                              class="w-4 h-4"
                            />
                          </div>
                        </span>
                      ))}
                    </div>
                  </div>
                )
              }

              <!-- {repoInfo && (
                  <div>
                    <h5 class="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      Homepage
                    </h5>
                    <a href={repoInfo.homepage} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 dark:text-blue-400 hover:underline">
                      {repoInfo.homepage}
                    </a>
                  </div>
                )
              } -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Related projects -->
    <!-- <div
      class="mt-16 pt-12 border-t border-neutral-200 dark:border-neutral-800"
    >
      <h3
        class="text-xl font-semibold text-neutral-900 dark:text-neutral-100 mb-6"
      >
        Other Projects
      </h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          projects
            .filter((p) => p.name !== project.name)
            .slice(0, 3)
            .map((relatedProject) => {
              const relatedSlug = generateSlug(relatedProject.name);
              return (
                <a href={`/projects/${relatedSlug}`} class="group block">
                  <div class="relative overflow-hidden rounded-lg border border-neutral-200 dark:border-neutral-800 transition-all duration-200 group-hover:border-neutral-300 dark:group-hover:border-neutral-600">
                    <img
                      src={getIcon( relatedProject.frameworks[0] ?? relatedProject.languages[0])}
                      alt={relatedProject.name}
                      class="w-full h-32 object-cover transition-transform duration-200 group-hover:scale-105"
                    />
                    <div class="p-4">
                      <h4 class="font-medium text-neutral-900 dark:text-neutral-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200">
                        {relatedProject.name}
                      </h4>
                      <p class="text-sm text-neutral-600 dark:text-neutral-400 mt-1 line-clamp-2">
                        {relatedProject.description}
                      </p>
                    </div>
                  </div>
                </a>
              );
            })
        }
      </div>
    </div> -->
  </section>
</Layout>
